// Generated by CoffeeScript 1.9.0
(function() {
  var deferTimeout, exited, fs, page, print, system, timeoutId;

  fs = require('fs');

  system = require('system');

  print = function(s) {
    return fs.write("/dev/stderr", s, 'w');
  };

  page = new WebPage();

  page.onConsoleMessage = function(msg) {
    return console.error(msg);
  };

  timeoutId = null;

  deferTimeout = function() {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
    return timeoutId = setTimeout(function() {
      console.error("Timeout");
      return phantom.exit(1);
    }, 3000);
  };

  exited = false;

  page.open(system.args[1], function() {
    deferTimeout();
    return setInterval(function() {
      var result, test, tests, _i, _len;
      if (exited) {
        return;
      }
      tests = page.evaluate(function() {
        var test, _i, _len, _results;
        tests = document.getElementById('qunit-tests').children;
        _results = [];
        for (_i = 0, _len = tests.length; _i < _len; _i++) {
          test = tests[_i];
          if (!(test.className !== 'running' && !test.recorded)) {
            continue;
          }
          test.recorded = true;
          if (test.className === 'pass') {
            _results.push('.');
          } else if (test.className === 'fail') {
            _results.push('F');
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      for (_i = 0, _len = tests.length; _i < _len; _i++) {
        test = tests[_i];
        if (!(test)) {
          continue;
        }
        deferTimeout();
        print(test);
      }
      result = page.evaluate(function() {
        var _j, _len1;
        result = document.getElementById('qunit-testresult');
        tests = document.getElementById('qunit-tests').children;
        if (result.innerText.match(/completed/)) {
          console.error("");
          for (_j = 0, _len1 = tests.length; _j < _len1; _j++) {
            test = tests[_j];
            if (test.className === 'fail') {
              console.error(test.innerText);
            }
          }
          console.error(result.innerText);
          return parseInt(result.getElementsByClassName('failed')[0].innerText);
        }
      });
      if (result != null) {
        exited = true;
        return phantom.exit(result);
      }
    }, 100);
  });

}).call(this);
